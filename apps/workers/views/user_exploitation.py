from django.contrib.auth.mixins import LoginRequiredMixin
from django.shortcuts import render
from django.urls import reverse_lazy
from django.views.generic import ListView, UpdateView, CreateView

from apps.workers.forms import OrganizationExploitation_Form_Control
from apps.workers.models import OrganizationExploitation
from mixin.access.access import AccessProjectMixin


class OrganizationExploitation_View(LoginRequiredMixin, AccessProjectMixin, ListView):
    """Эксплуатирующие организации"""
    model = OrganizationExploitation
    template_name = 'user/exploitation/organization.html'
    login_url = 'login'
    permission_required = 'workers.organizationExploitation_view'

    def get(self, *args, **kwargs):
        if self.request.user.has_perm('workers.organizationExploitation_delete'):
            query = self.request.GET.get('remove')
            if query is not None:
                try:
                    remove = OrganizationExploitation.objects.get(slug=query)
                    remove.delete()
                except:
                    pass
        organizationExploitations = OrganizationExploitation.objects.all()  # Запрос
        context = {'exploitations': organizationExploitations, 'title': 'Эксплуатирующие организации'}

        return render(self.request, self.template_name, context)


class OrganizationExploitation_Update(LoginRequiredMixin, AccessProjectMixin, UpdateView):
    """Эксплуатирующие организации"""
    model = OrganizationExploitation
    template_name = 'user/exploitation/organization_control.html'
    form_class = OrganizationExploitation_Form_Control
    success_url = reverse_lazy('organizationExploitation')

    login_url = 'login'
    permission_required = 'workers.organizationExploitation_change'

    # Управление по slug
    def get_object(self, queryset=None):
        instance = OrganizationExploitation.objects.get(slug=self.kwargs.get('organizationExploitation_slug', ''))
        return instance

    def get_context_data(self, *, object_list=None, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = 'Редактировать эксплуатирующую организацию'
        context['title_page'] = 'Редактировать'
        return context


class OrganizationExploitation_Add(LoginRequiredMixin, AccessProjectMixin, CreateView):
    """Эксплуатирующие организации"""
    model = OrganizationExploitation
    template_name = 'user/exploitation/organization_control.html'
    form_class = OrganizationExploitation_Form_Control
    success_url = reverse_lazy('organizationExploitation')

    login_url = 'login'
    permission_required = 'workers.organizationExploitation_add'

    def get_context_data(self, *, object_list=None, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = 'Добавить эксплуатирующую организацию'
        context['title_page'] = 'Добавить'

        return context
